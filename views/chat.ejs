<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        body {
            height: 100vh;
            text-align: center;
            display: flex;
            flex-direction: column;
        }
        body>header, body>footer {
            padding: 0;
        }
        main {
            flex-grow: 1;
            overflow-y: auto;
        }
        article.my-chat, article.other-chat {
            width: 60%;
            text-align: left;
        }
        article.my-chat {
            margin-left: 40%;
        }
        article.contrast {
            background-color: var(--pico-contrast-background);
            color: var(--pico-contrast-inverse);
            --pico-card-border-color: var(--pico-contrast);
        }
        article.contrast header {
            background-color: var(--pico-contrast-hover);
            color: var(--pico-contrast-inverse);
        }
        .header-button {
            width: 40px;
            height: 40px;
            padding: 0;
        }
        #goBack {
            position: absolute;
            left: 10px;
        }
        #memberInfo {
            position: absolute;
            right: 10px;
        }
        footer>[role=group] {
            margin: 0;
        }
        textarea {
            resize: none;
        }
        .modal {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.25);
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
        }
        #event-list, #member-list {
            width: 90%;
            height: 90%;
            overflow-y: scroll;
            background-color: var(--pico-background-color);
            padding: 10px;
            border-radius: 10px;
            -ms-overflow-style: none; /* IE and Edge */
            scrollbar-width: none; /* Firefox */
        }
        #member-list article {
            text-align: left;
        }
        #event-list article:hover {
            background-color: var(--pico-text-selection-color);
        }
        #event-list article:hover header {
            background-color: var(--pico-text-selection-color);
        }
        #event-list:-webkit-scrollbar {
            display: none;
        }
    </style>
</head>
<body>
    <header>
        <button id="goBack" class="header-button" onclick="location.href='/chatroomframe';"><</button>
        <button id="memberInfo" class="header-button">&#9776;</button>
        <h3><%= room.room_name %></h3>
    </header>
    <main>
        <div class="msg-cont">
        <% chat_log.forEach((row) => { %>
            <article class="<%= ((row.user_id==user.user_id) ? 'my-chat' : 'other-chat') %> <%= row.type %>">
                <header>
                    <%= row.user_name %>
                </header>
                <main>
                    <% if (row.type == 'text') { %>
                        <% row.chat.split('\n').forEach((c, i) => { %>
                            <%= c %>
                            <% if (i!=row.chat.split('\n').length-1) { %>
                            <br>
                            <% } %>
                        <% }) %>
                    <% } else if (row.type == 'img') { %> 
                        <img src="/<%= row.chat %>" alt="deleted img" class="chat-img">
                    <% } else if (row.type == 'payment') { %>
                        <a href="/payment/<%= row.chat %>" target="_blank">결재 요청</a>
                    <% } else if (row.type == 'calendar') { %>
                        일정을 공유했습니다.
                        <article class="contrast">
                            <header><%= row.chat.split('\t')[1] %></header>
                            <main><%= row.chat.split('\t')[2] %> ~ <%= row.chat.split('\t')[3] %></main>
                        </article>
                    <% } %>
                </main>
            </article>
            <% }) %>
        </div>
    </main>
    <footer>
        <div role="group">
            <button id="imgUpload"><label for="img-input">이미지 첨부</label></button>
            <button id="paymentUpload"><label for="payment-input">전자 결재 요청</label></button>
            <button id="calendarShare">일정 등록</button>
        </div>
        <div class="msg-form" role="group">
            <textarea type="text" id="msg"></textarea>
            <button id="submit">submit</button>
        </div>
    </footer>
    <div id="eventModal" class="modal" style="display: none;">
        <div id="event-list">
        </div>
    </div>
    <div id="memberModal" class="modal" style="display: none;">
        <div id="member-list">
            <% member.forEach((m) => { %>
                <article>
                    <%= m.user_name %>
                </article>
            <% }); %>
        </div>
    </div>
    <input type="file" id="img-input" style="display: none;" accept="image/*">
    <input type="file" id="payment-input" style="display: none;" accept="application/pdf, image/png">
    
    <script>
        const socket = io();
        const cont = document.querySelector('.msg-cont');
        const chat_main = document.querySelector('main');
        const imgInput = document.querySelector('#img-input');
        const paymentInput = document.querySelector('#payment-input');
        const allowExt = ['png', 'pjp', 'jpg', 'jpeg', 'jfif', 'webp', 'bmp'];
        const regURL = new RegExp("(http|https|ftp|telnet|news|irc)://([-/.a-zA-Z0-9_~#%$?&=:200-377()]+)","gi");
        const room_id = '<%= room.id %>';
        const imgs = document.querySelectorAll('img');
        imgs.forEach((img) => {
            img.addEventListener('load', () => {
                chat_main.scrollTop = chat_main.scrollHeight;
            });
        });

        document.addEventListener('DOMContentLoaded', () => {
            const chats = document.querySelectorAll('article>main');
            chats.forEach((chat) => {
                chat.innerHTML = chat.innerHTML.replace(regURL, "<a href='$1://$2' target='_blank'>$1://$2</a>");
            });
            socket.emit('join', room_id);
            const chatImgs = document.querySelectorAll('.chat-img');
            chatImgs.forEach((img) => {
                img.addEventListener('click', (e) => {
                    parent.modalOpen(e.target.getAttribute('src'));
                });
            });
            chat_main.scrollTop = chat_main.scrollHeight;
        });
        
        socket.on('msg', async (msg) => {
            const chatbox = document.createElement('article');
            const response = await fetch('/session/user_id');
            const res = await response.text();
            console.log(res);
            if (msg.user_id == res) {
                chatbox.className += 'my-chat';
            } else {
                chatbox.className += 'other-chat';
            }
            chatbox.className += ' ' +msg.type;
            const header = document.createElement('header');
            header.innerText = msg.user_name;
            chatbox.appendChild(header);
            
            const main = document.createElement('main');
            if (msg.type == 'text') {
                main.innerText = msg.message;
                main.innerHTML = main.innerHTML.replace(regURL, "<a class='artist-portfolio' href='$1://$2' target='_blank'>$1://$2</a>");
            } else if (msg.type == 'img') {
                const img = document.createElement('img');
                img.setAttribute('src', '/'+msg.message);
                img.className += 'chat-img';
                img.addEventListener('load', () => {
                    chat_main.scrollTop = chat_main.scrollHeight;
                });
                img.addEventListener('click', (e) => {
                    parent.modalOpen(e.target.getAttribute('src'));
                });
                main.appendChild(img);
            } else if (msg.type == 'payment') {
                const anchor = document.createElement('a');
                anchor.setAttribute('href', '/payment/'+msg.message);
                anchor.setAttribute('target', '_blank');
                anchor.innerText = '결재 요청';
                main.appendChild(anchor);
            } else if (msg.type == 'calendar') {
                const message = msg.message.split('\t');
                // console.log(message);
                main.innerText = "일정을 공유했습니다.";
                const article = document.createElement('article');
                article.classList = 'contrast';
                const articleHeader = document.createElement('header');
                articleHeader.innerText = message[1];
                article.appendChild(articleHeader);
                const articleMain = document.createElement('main');
                articleMain.innerText = message[2] + ' ~ ' +message[3];
                article.appendChild(articleMain);
                main.appendChild(article);
            }
            chatbox.appendChild(main);
            cont.appendChild(chatbox);
            chat_main.scrollTop = chat_main.scrollHeight;
        });

        document.querySelector('#submit').addEventListener('click', (e) => {
            const userMsg = document.querySelector('#msg');

            if (userMsg.value == '') {
                return;
            }

            socket.emit('msg', {message: userMsg.value, type: 'text', room: room_id});
            userMsg.value = '';
        });

        imgInput.addEventListener('input', async (e) => {
            if (!allowExt.includes(imgInput.files[0].name.split('.').pop())) {
                imgInput.value = '';
                return false;
            }

            let formData = new FormData();
            formData.append('file', imgInput.files[0]);
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });
            const res = await response.json();
            
            imgInput.value = '';
            socket.emit('msg', {message: res.path, type: 'img', room: room_id});
        });

        paymentInput.addEventListener('input', async (e) => {
            if (!['pdf', 'png'].includes(paymentInput.files[0].name.split('.').pop())) {
                paymentInput.value = '';
                return false;
            }

            let formData = new FormData();
            formData.append('file', paymentInput.files[0]);
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });
            const res = await response.json();
            paymentInput.value = '';
            console.log(res.path);
            const responsePayment = await fetch('/payment_req', {
                method: 'POST',
                headers: {
                    "content-type": "application/json"
                },
                body: JSON.stringify({
                    path: res.path,
                })
            });
            const resPayment =  await responsePayment.json();
            console.log(resPayment);
            socket.emit('msg', {message: resPayment.uuid, type: 'payment', room: room_id});
        });
        
        document.querySelector('#calendarShare').addEventListener('click', async () => {
            const modal = document.querySelector('#eventModal');

            let userId = await fetch('/session/user_id');
            userId = await userId.text();
            const response = await fetch(`/api/events/${userId}`);
            if (response.ok) {
                const events = await response.json();
                const eventList = document.querySelector('#event-list');
                eventList.innerHTML = '';
                events.myCalendar.forEach((event) => {
                    const article = document.createElement('article');
                    const header = document.createElement('header');
                    header.innerText = event.title;
                    const main = document.createElement('main');
                    main.innerText = event.start_date.replace('T', ' ') + ' ~ ' + event.end_date.replace('T', ' ');
                    article.appendChild(header);
                    article.appendChild(main);
                    eventList.appendChild(article);

                    article.addEventListener('click', async () => {
                        const response = await fetch('/calendar/share', {
                            method: 'POST',
                            headers: {
                                "content-type": "application/json"
                            },
                            body: JSON.stringify({
                                calendarId: event.id,
                                roomId: room_id
                            })
                        });
                        if (!response.ok) {
                            location.href = '/';
                        }
                        socket.emit('msg', {
                            message: event.id+'\t'+event.title+'\t'+event.start_date.replace('T', ' ')+'\t'+event.end_date.replace('T', ' '),
                            type: 'calendar',
                            room: room_id,
                        });
                    });
                });
            }
            modal.style.display = 'flex';
        });
        document.querySelector('#memberInfo').addEventListener('click', () => {
            document.querySelector('#memberModal').style.display = 'flex';
        });
        document.querySelector('#eventModal').addEventListener('click', (e) => {
            document.querySelector('#eventModal').style.display = 'none';
        });
        document.querySelector('#memberModal').addEventListener('click', (e) => {
            document.querySelector('#memberModal').style.display = 'none';
        });
    </script>
</body>
</html>