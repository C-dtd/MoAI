<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Upload and Drawing</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }

        #pdfContainer {
            margin-top: 20px;
            text-align: center;
        }

        canvas {
            border: 1px solid #ddd;
            background: #f9f9f9;
            cursor: crosshair;
        }

        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #morepage {
            display: flex;
            flex-direction: column;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            text-align: right;
            width: 100%;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /* Modal buttons */
        #modalButtons {
            margin-bottom: 20px;
        }

        #modalButtons button {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <!-- <div class="container">
        <button><label for="fileInput">파일선택</label></button>
    </div> -->

    <!-- Modal for viewing and editing -->
    <div id="fileModal" class="modal">
        <div class="modal-content">
            <%= applied %>
            <!-- <span class="close">&times;</span> -->
            <canvas id="modalCanvas"></canvas>
            <% if (applied) { %>
                <button id="modalDownloadButton" disabled>승인 완료</button>
            <% } else { %>
                <button id="modalDownloadButton">승인</button>
            <% } %>
            <div id="morepage"></div>
        </div>
    </div>

    <input type="file" id="fileInput" accept=".pdf, .png" name="document" style="display: none;"/>
    <!-- Include pdf.js library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.1.81/pdf.min.js"></script>

    <!-- Include PDF-lib library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.11.0/pdf-lib.min.js"></script>

    <!-- Include custom script -->
    <script>
        

        document.addEventListener('DOMContentLoaded', () => {
        // Set the path to the PDF.js worker script
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.1.81/pdf.worker.min.js';
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');
        const viewButton = document.getElementById('viewButton');
        const modalDrawButton = document.getElementById('modalDrawButton');
        const morepage = document.querySelector('#morepage');
        const modalDownloadButton = document.getElementById('modalDownloadButton');
        const modalCanvas = document.getElementById('modalCanvas');
        const fileModal = document.getElementById('fileModal');
        const closeModal = document.querySelector('.close');
        const ctx = modalCanvas.getContext('2d');
        
        let uploadedFile = "";
        
        async function fileDownload() {
            response = await fetch('/payment_file/<%= uuid %>');
            const resBlob = await response.blob();
            uploadedFile = await new File([resBlob], 'payment', { type: resBlob.type });
            if (uploadedFile.type === 'application/pdf') {
                renderPDF(uploadedFile);
            } else if (uploadedFile.type === 'image/png') {
                renderPNG(uploadedFile);
            }
            fileModal.style.display = 'block';
        }
        fileDownload();
            
        let isDrawing = <%= !applied %>;
        let lastX = 0;
        let lastY = 0;
        let ratio = 1;

        function initializeCanvas() {
            modalCanvas.addEventListener('mousedown', (e) => {
                if (isDrawing) {
                    lastX = e.offsetX;
                    lastY = e.offsetY;
                    modalCanvas.addEventListener('mousemove', draw);
                    console.log(ratio);
                }
            });

            modalCanvas.addEventListener('mouseup', () => {
                modalCanvas.removeEventListener('mousemove', draw);
            });

            modalCanvas.addEventListener('mouseleave', () => {
                modalCanvas.removeEventListener('mousemove', draw);
            });
        }

        function draw(e) {
            if (isDrawing) {
                ctx.beginPath();
                ctx.moveTo(lastX/ratio, lastY/ratio);
                ctx.lineTo(e.offsetX/ratio, e.offsetY/ratio);
                ctx.strokeStyle = 'black'; // Color of the drawing
                ctx.lineWidth = 2; // Thickness of the drawing
                ctx.stroke();
                lastX = e.offsetX;
                lastY = e.offsetY;
            }
        }

        async function renderPDF(file) {
            const fileReader = new FileReader();
            fileReader.onload = async () => {
                const typedarray = new Uint8Array(fileReader.result);
                const pdf = await pdfjsLib.getDocument(typedarray).promise;
                const numPage = pdf._pdfInfo.numPages;
                const pages = [];
                for (let i=0; i<numPage; i++) {
                    pages[i] = await pdf.getPage(i +1);
                }
                
                const page = pages[0];
                const viewport = page.getViewport({ scale: 1 });
                if (viewport.width > window.innerWidth*0.8) {
                    ratio = window.innerWidth*0.8/viewport.width;
                } else {
                    ratio = 1;
                }

                modalCanvas.height = viewport.height;
                modalCanvas.width = viewport.width;
                modalCanvas.style = `width: ${viewport.width *ratio}px;`;
                const renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                await page.render(renderContext).promise;
                initializeCanvas();
                morepage.innerHTML = '';
                pages.slice(1).forEach((page) => {
                    const viewport = page.getViewport({ scale: 1 });
                    const canv = document.createElement('canvas');
                    const context = canv.getContext('2d');

                    canv.height = viewport.height;
                    canv.width = viewport.width;
                    canv.style = `width: ${viewport.width *ratio}px;`;
                    const renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext).promise;

                    morepage.appendChild(canv);
                });
            };
            fileReader.readAsArrayBuffer(file);
        }

        function renderPNG(file) {
            const fileReader = new FileReader();
            fileReader.onload = (e) => {
                const img = new Image();
                img.onload = () => {
                    if (img.width > window.innerWidth *0.8) {
                        ratio = window.innerWidth*0.8/img.width;
                    } else {
                        ratio = 1;
                    }
                    modalCanvas.width = img.width;
                    modalCanvas.height = img.height;
                    modalCanvas.style = `width: ${img.width *ratio}px;`;
                    ctx.drawImage(img, 0, 0);
                    initializeCanvas();
                };
                img.src = e.target.result;
            };
            fileReader.readAsDataURL(file);
        }

        async function applyDrawingToPDF() {
            const pdfDoc = await PDFLib.PDFDocument.create();
            const existingPdfBytes = await fetch(URL.createObjectURL(uploadedFile)).then(res => res.arrayBuffer());
            const existingPdfDoc = await PDFLib.PDFDocument.load(existingPdfBytes);

            const numPages = existingPdfDoc.getPageCount();
            const pageIndices = Array.from({length: numPages}, (_, i) => i);
            const copiedPages = await pdfDoc.copyPages(existingPdfDoc, pageIndices);
            copiedPages.forEach((page) => {
                pdfDoc.addPage(page);
            })
            
            // Get image data from canvas
            const imgData = modalCanvas.toDataURL('image/png');
            const pngImage = await pdfDoc.embedPng(imgData);

            // Set page dimensions to match the canvas
            const page = pdfDoc.getPages()[0];
            page.setSize(modalCanvas.width, modalCanvas.height);

            // Draw the image on the page
            page.drawImage(pngImage, {
                x: 0,
                y: 0,
                width: modalCanvas.width,
                height: modalCanvas.height,
            });

            return pdfDoc;
        }

        modalDownloadButton.addEventListener('click', async () => {
            if (uploadedFile) {
                if (uploadedFile.type === 'application/pdf') {
                    try {
                        const pdfDoc = await applyDrawingToPDF();
                        const pdfBytes = await pdfDoc.save();
                        const blob = new Blob([pdfBytes], { type: 'application/pdf' });
                        const apliedPdf = new File([pdfBytes], 'aplied.pdf', { type: 'application/pdf' });
                        const formData = new FormData();
                        formData.append('file', apliedPdf);
                        formData.append('uuid', "<%= uuid %>");
                        const response = await fetch('/payment_res', {
                            method: 'POST',
                            body: formData
                        });
                        const res = await response.json();
                        modalDownloadButton.disabled = true;
                        modalDownloadButton.innerText = "승인 완료";
                        isDrawing = false;
                    } catch (error) {
                        console.error('Error generating PDF:', error);
                    }
                } else if (uploadedFile.type === 'image/png') {
                    try {
                        const imgData = modalCanvas.toDataURL('image/png');
                        const imgRes = await fetch(imgData);
                        const blob = await imgRes.blob();
                        const apliedPng = new File([blob], 'aplied.png', { type: 'image/png'});

                        const formData = new FormData();
                        formData.append('file', apliedPng);
                        formData.append('uuid', "<%= uuid %>");
                        const response = await fetch('/payment_res', {
                            method: 'POST',
                            body: formData
                        });
                        const res = await response.json();
                        modalDownloadButton.disabled = true;
                        modalDownloadButton.innerText = "승인 완료";
                        isDrawing = false;
                    } catch (error) {
                        console.error('Error generating PNG:', error);
                    }
                }
            } else {
                alert('먼저 파일을 업로드하고 수정하세요.');
            }
        });
    });
    </script>
</body>
</html>






















