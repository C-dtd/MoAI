<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Page with createRoot</title>
    <style>
        .control-button {
            background-color: #f0f0f0; /* 버튼 배경 색상 (밝은 회색) */
            border: 1px solid #ddd; /* 연한 테두리 */
            color: #333; /* 텍스트 색상 (어두운 회색) */
            padding: 8px 16px; /* 패딩 조정 */
            margin: 0 5px; /* 버튼 간의 간격 */
            border-radius: 20px; /* 완전한 둥근 모서리 */
            font-size: 14px; /* 폰트 크기 */
            cursor: pointer; /* 마우스 커서 변경 */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 가벼운 그림자 효과 */
            transition: background-color 0.3s ease, box-shadow 0.3s ease; /* 호버 애니메이션 */
        }
        
        .control-button:hover {
            background-color: #e0e0e0; /* 호버 시 배경 색상 */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); /* 호버 시 그림자 효과 */
        }
        
        .control-button:focus {
            outline: none; /* 포커스 시 외곽선 제거 */
            box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1); /* 포커스 시 그림자 효과 */
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <!-- React와 ReactDOM을 CDN에서 로드 -->
    <script src="https://unpkg.com/react/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom/umd/react-dom.development.js"></script>
    
    <!-- Babel을 사용하여 브라우저에서 JSX를 변환 -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/@toast-ui/react-calendar"></script>
    
    <link rel="stylesheet" href="https://unpkg.com/@toast-ui/calendar/dist/toastui-calendar.min.css">
    <link rel="stylesheet" href="https://unpkg.com/tui-date-picker/dist/tui-date-picker.css">
    <link rel="stylesheet" href="https://unpkg.com/tui-time-picker/dist/tui-time-picker.css">

    <script>
        function uuid() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        
    </script>
    <!-- JSX로 React 컴포넌트 작성 및 createRoot 사용 -->
    <script type="text/babel">
        const { useRef, useEffect, useState } = React;
        const { ReactCalendar } = tui;
        // React 컴포넌트 정의
        const App = () => {
            const calendarRef = useRef(null);
            const [currentMonth, setCurrentMonth] = useState('');

            useEffect(() => {
                const updateMonth = () => {
                if (calendarRef.current) {
                    const calendarInstance = calendarRef.current.getInstance();
                    const viewDate = calendarInstance.getDate();
                    setCurrentMonth(`${viewDate.getFullYear()}년 ${viewDate.getMonth() + 1}월`);
                }
                };

                updateMonth();
                const calendarInstance = calendarRef.current.getInstance();
                const initialSchedules = [
                    {
                        id: uuid(),
                        title: '전체일정 이벤트',
                        category: 'allday',
                        start: '2024-08-22T00:00:00',
                        end: '2024-08-22T23:59:59',
                        state: 'Free',
                        location: 'home',
                        isReadOnly: false,
                    },
                ];
                // 캘린더에 기본 일정 추가
                calendarInstance.createEvents(initialSchedules);

                // 팝업에서 일정 생성하기 전에 호출되는 함수 & DB에 데이터 전송도 같이
                const handleBeforeCreateEvent = async (eventObj) => {
                    const newEvent = {
                        ...eventObj,
                        id: uuid(), // 고유 ID 생성
                        
                    };
                    console.log('create', newEvent);
                    // //console.log(dateParser(newEvent.start.d.d));
                    console.log(newEvent);
                    calendarInstance.createEvents([newEvent]);

                    const response = await fetch('/api/events', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(newEvent),
                    });

                    if (response.ok) {
                        console.log('서버로 이벤트 보내는 거 성공적임');
                        // 캘린더에 이벤트를 추가
                        calendarInstance.createEvents([newEvent]);
                    } else {
                        console.log('Failed to send event to the server');
                    }
                };

                const handleBeforeUpdateEvent = ({ event, changes }) => {
                    console.log('Updating event:', event);
                    console.log('Changes:', changes);

                    calendarInstance.updateEvent(event.id, event.calendarId, changes);
                };

                const handleBeforeDeleteEvent = ({ id, calendarId }) => {
                    console.log('Deleting event:', id);
                    calendarInstance.deleteEvent(id, calendarId);
                };

                calendarInstance.on('beforeCreateEvent', handleBeforeCreateEvent);
                calendarInstance.on('beforeUpdateEvent', handleBeforeUpdateEvent);
                calendarInstance.on('beforeDeleteEvent', handleBeforeDeleteEvent);
            }, []);

            const calendarOptions = {
                week: {
                    dayNames: ['월', '화', '수', '목', '금', '토', '일'], // 요일 이름을 한글로 설정
                    startDayOfWeek: 0, // 일요일을 시작으로 설정 (0=일요일, 1=월요일)
                    narrowWeekend: true, // 주말을 좁게 표시
                },
                month: {
                    dayNames: ['일', '월', '화', '수', '목', '금', '토'], // 월간 보기에서 요일 이름 설정
                },
                template: {
                    popupIsAllday() {
                        return '하루종일';
                    },                    
                    locationPlaceholder() {
                        return '장소';
                    },
                    titlePlaceholder() {
                        return '일정 제목';
                    },
                    popupSave() {
                        return '일정 추가';
                    },
                    popupEdit() {
                        return '수정';
                    },
                    popupDelete(){
                        return '삭제';
                    }
                }
            };

            const handleNext = () => {
                const calendarInstance = calendarRef.current.getInstance();
                calendarInstance.next();
                updateMonth();
            };

            const handlePrev = () => {
                const calendarInstance = calendarRef.current.getInstance();
                calendarInstance.prev();
                updateMonth();
            };

            const handleToday = () => {
                const calendarInstance = calendarRef.current.getInstance();
                calendarInstance.today();
                updateMonth();
            };

            const updateMonth = () => {
                if (calendarRef.current) {
                const calendarInstance = calendarRef.current.getInstance();
                const viewDate = calendarInstance.getDate();
                setCurrentMonth(`${viewDate.getFullYear()}년 ${viewDate.getMonth() + 1}월`);
                }
            };
        
            return (
                <div className="App">
                    <h1 align="center">{currentMonth}</h1>
                    <div className="controls">
                        <button className="control-button" onClick={handlePrev}>이전 달</button>
                        <button className="control-button" onClick={handleNext}>다음 달</button>
                        <button className="control-button" onClick={handleToday}>오늘</button>
                    </div>
                    <ReactCalendar
                        ref={calendarRef}
                        height='500px'
                        view="month"
                        useFormPopup={true}  // 팝업을 사용하도록 설정
                        useDetailPopup={true}
                        week={calendarOptions.week}  // 주간 옵션 전달
                        month={calendarOptions.month} // 월간 옵션 전달
                        template={calendarOptions.template} // 템플릿 옵션 추가
                    />
                </div>
            );
        };

        // ReactDOM.createRoot 사용하여 렌더링
        const rootElement = document.getElementById('root');
        const root = ReactDOM.createRoot(rootElement);

        root.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>
        );
    </script>
</body>
</html>